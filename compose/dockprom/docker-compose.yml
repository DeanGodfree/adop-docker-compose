version: "2.3"

volumes:
  prometheus_data: {}
  grafana_data: {}

#networks:
#  local_network:
#    driver: bridge

services:
  prometheus:
    image: prom/prometheus:v2.2.0-rc.0
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention=200h'
      - '--web.enable-lifecycle'
      #- '--web.external-url=http://localhost/prometheus'
      - '--web.route-prefix=/prometheus'
    restart: unless-stopped
    expose:
      - 9090
    #networks:
    #  - ${CUSTOM_NETWORK_NAME}
    network_mode: bridge
    external_links:
      - proxy
    labels:
      org.label-schema.group: "monitoring"

  alertmanager:
    image: prom/alertmanager:v0.14.0
    container_name: alertmanager
    volumes: 
      - ./alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    expose:
      - 9093
    networks:
      - ${CUSTOM_NETWORK_NAME}
    labels:
      org.label-schema.group: "monitoring"

  nodeexporter:
    image: prom/node-exporter:v0.15.2
    container_name: nodeexporter
    user: root
    privileged: true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - ${CUSTOM_NETWORK_NAME}
    labels:
      org.label-schema.group: "monitoring"

  cadvisor:
    image: google/cadvisor:v0.28.3
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - ${CUSTOM_NETWORK_NAME}
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    image: deangodfree/adop-grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${INITIAL_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${INITIAL_ADMIN_PASSWORD_PLAIN}
      - GF_USERS_ALLOW_SIGN_UP=false
      - LDAP_HOST="${LDAP_HOST}"
      - LDAP_PORT=${LDAP_PORT}
      - LDAP_SSL=false
      - LDAP_TLS=false
      - LDAP_SKIP_CERT_VERIFY=false
      - LDAP_CERT_PATH="/path/to/certificate.crt"
      - LDAP_MANAGER_DN="${LDAP_MANAGER_DN}"
      - LDAP_MANAGER_PASSWORD=${LDAP_PWD}
      - LDAP_SEARCH_FILTER="${LDAP_USER_SEARCH}"
      - LDAP_ROOT_DN="${LDAP_FULL_DOMAIN}"
      - LDAP_MAIL_ADDRESS_ATTRIBUTE_NAME="mail"
      - LDAP_ADMIN_GROUP_DN="cn=administrators,ou=groups,dc=ldap,dc=example,dc=com"
      - LDAP_USER_GROUP_DN="cn=sonar-users,ou=groups,dc=ldap,dc=example,dc=com"
    restart: unless-stopped
    expose:
      - 3000
    networks:
      - ${CUSTOM_NETWORK_NAME}
    labels:
      org.label-schema.group: "monitoring"

  caddy:
    image: stefanprodan/caddy
    container_name: caddy
    ports:
      - "3000:3000"
      - "9090:9090"
      - "9093:9093"
    volumes:
      - ./caddy/:/etc/caddy/
    environment:
      - ADMIN_USER=admin
      - ADMIN_PASSWORD=admin
    restart: unless-stopped
    networks:
      - ${CUSTOM_NETWORK_NAME}
    labels:
      org.label-schema.group: "monitoring"

  sample-service:
    image: node:6.9.5-alpine
    command: node test.js
    volumes:
      - ./sample-service/test.js:/test.js:ro
    ports:
      - "8000:8000"
    restart: unless-stopped
    networks:
      - ${CUSTOM_NETWORK_NAME}
    labels:
      org.label-schema.group: "monitoring"

  gatling-runner:
    #image: gatling:2.3.0
    scale: 2 # Scale to see the result of multiple nodes
    build: 
      context: gatling/2.3.0
    command: [-s, sample.SampleService]
    environment:
      - LOCAL_USER_ID=ADOP
    volumes:
      - ./gatling/2.3.0/simulations:/opt/app/java/gatling/user-files/simulations
      - ./gatling/2.3.0/results:/opt/app/java/gatling/results
    networks:
      - ${CUSTOM_NETWORK_NAME}
    labels:
      org.label-schema.group: "monitoring"
    restart: unless-stopped

  influxdb:
    #image: influxdb:2.3.0
    build:
      context: influxdb/1.2.0-alpine
    ports:
      - "8083:8083"
      - "8086:8086"
      - "2003:2003"
    networks:
      - ${CUSTOM_NETWORK_NAME}
    labels:
      org.label-schema.group: "monitoring"
    restart: unless-stopped